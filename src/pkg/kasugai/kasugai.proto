syntax = "proto3";

option go_package = "/kasugai";

package kasugai;

// A unique ID to identify messages, streams, and files
message Id {
    string uuid = 1;
}

// Message types for text-based chat
message Message {
    Id messageId = 1;
    string senderId = 2;
    string recipientId = 3;
    string content = 4;
    int64 timestamp = 5; // Unix timestamp
}

// Message types for video streaming and screen sharing
message VideoStream {
    Id streamId = 1;
    bytes data = 2; // Chunk of video data
}

message ScreenShare {
    Id streamId = 1;
    bytes data = 2; // Chunk of screenshare data
}

// Message types for file transfers
message FileMetadata {
    Id fileId = 1;
    string name = 2;
    int32 size = 3; // File size in bytes
    string type = 4; // MIME type or file extension
}

message FileChunk {
    Id fileId = 1;
    bytes data = 2; // Chunk of file data
}

// Service definitions
service ChatService {
    // Text messaging
    rpc SendMessage(Message) returns (Ack);
    rpc ReceiveMessages(Id) returns (stream Message);

    // Video streaming
    rpc StartVideoStream(VideoStream) returns (Ack);
    rpc WatchVideoStream(Id) returns (stream VideoStream);

    // Screen sharing
    rpc StartScreenShare(ScreenShare) returns (Ack);
    rpc WatchScreenShare(Id) returns (stream ScreenShare);
}

service FileTransferService {
    // P2P file transfer
    rpc SendFileMetadata(FileMetadata) returns (Ack);
    rpc SendFileChunk(FileChunk) returns (Ack);
    rpc ReceiveFileMetadata(Id) returns (FileMetadata);
    rpc ReceiveFileChunk(Id) returns (stream FileChunk);

    // Server to user file transfer
    rpc UploadFileToServer(FileChunk) returns (Ack);
    rpc DownloadFileFromServer(Id) returns (stream FileChunk);
}

// Acknowledgement message
message Ack {
    bool success = 1;
    string message = 2; // Optional error or success message
}
