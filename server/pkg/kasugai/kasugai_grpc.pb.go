// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: kasugai.proto

package kasugai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	// Text messaging
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Ack, error)
	ReceiveMessages(ctx context.Context, in *Id, opts ...grpc.CallOption) (ChatService_ReceiveMessagesClient, error)
	// Video streaming
	StartVideoStream(ctx context.Context, in *VideoStream, opts ...grpc.CallOption) (*Ack, error)
	WatchVideoStream(ctx context.Context, in *Id, opts ...grpc.CallOption) (ChatService_WatchVideoStreamClient, error)
	// Screen sharing
	StartScreenShare(ctx context.Context, in *ScreenShare, opts ...grpc.CallOption) (*Ack, error)
	WatchScreenShare(ctx context.Context, in *Id, opts ...grpc.CallOption) (ChatService_WatchScreenShareClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/kasugai.ChatService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReceiveMessages(ctx context.Context, in *Id, opts ...grpc.CallOption) (ChatService_ReceiveMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/kasugai.ChatService/ReceiveMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceReceiveMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ReceiveMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatServiceReceiveMessagesClient struct {
	grpc.ClientStream
}

func (x *chatServiceReceiveMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) StartVideoStream(ctx context.Context, in *VideoStream, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/kasugai.ChatService/StartVideoStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) WatchVideoStream(ctx context.Context, in *Id, opts ...grpc.CallOption) (ChatService_WatchVideoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], "/kasugai.ChatService/WatchVideoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceWatchVideoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_WatchVideoStreamClient interface {
	Recv() (*VideoStream, error)
	grpc.ClientStream
}

type chatServiceWatchVideoStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceWatchVideoStreamClient) Recv() (*VideoStream, error) {
	m := new(VideoStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) StartScreenShare(ctx context.Context, in *ScreenShare, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/kasugai.ChatService/StartScreenShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) WatchScreenShare(ctx context.Context, in *Id, opts ...grpc.CallOption) (ChatService_WatchScreenShareClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[2], "/kasugai.ChatService/WatchScreenShare", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceWatchScreenShareClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_WatchScreenShareClient interface {
	Recv() (*ScreenShare, error)
	grpc.ClientStream
}

type chatServiceWatchScreenShareClient struct {
	grpc.ClientStream
}

func (x *chatServiceWatchScreenShareClient) Recv() (*ScreenShare, error) {
	m := new(ScreenShare)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	// Text messaging
	SendMessage(context.Context, *Message) (*Ack, error)
	ReceiveMessages(*Id, ChatService_ReceiveMessagesServer) error
	// Video streaming
	StartVideoStream(context.Context, *VideoStream) (*Ack, error)
	WatchVideoStream(*Id, ChatService_WatchVideoStreamServer) error
	// Screen sharing
	StartScreenShare(context.Context, *ScreenShare) (*Ack, error)
	WatchScreenShare(*Id, ChatService_WatchScreenShareServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) SendMessage(context.Context, *Message) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) ReceiveMessages(*Id, ChatService_ReceiveMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedChatServiceServer) StartVideoStream(context.Context, *VideoStream) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVideoStream not implemented")
}
func (UnimplementedChatServiceServer) WatchVideoStream(*Id, ChatService_WatchVideoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchVideoStream not implemented")
}
func (UnimplementedChatServiceServer) StartScreenShare(context.Context, *ScreenShare) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScreenShare not implemented")
}
func (UnimplementedChatServiceServer) WatchScreenShare(*Id, ChatService_WatchScreenShareServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchScreenShare not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasugai.ChatService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ReceiveMessages(m, &chatServiceReceiveMessagesServer{stream})
}

type ChatService_ReceiveMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatServiceReceiveMessagesServer struct {
	grpc.ServerStream
}

func (x *chatServiceReceiveMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_StartVideoStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).StartVideoStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasugai.ChatService/StartVideoStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).StartVideoStream(ctx, req.(*VideoStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_WatchVideoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).WatchVideoStream(m, &chatServiceWatchVideoStreamServer{stream})
}

type ChatService_WatchVideoStreamServer interface {
	Send(*VideoStream) error
	grpc.ServerStream
}

type chatServiceWatchVideoStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceWatchVideoStreamServer) Send(m *VideoStream) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_StartScreenShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScreenShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).StartScreenShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasugai.ChatService/StartScreenShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).StartScreenShare(ctx, req.(*ScreenShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_WatchScreenShare_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).WatchScreenShare(m, &chatServiceWatchScreenShareServer{stream})
}

type ChatService_WatchScreenShareServer interface {
	Send(*ScreenShare) error
	grpc.ServerStream
}

type chatServiceWatchScreenShareServer struct {
	grpc.ServerStream
}

func (x *chatServiceWatchScreenShareServer) Send(m *ScreenShare) error {
	return x.ServerStream.SendMsg(m)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kasugai.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
		{
			MethodName: "StartVideoStream",
			Handler:    _ChatService_StartVideoStream_Handler,
		},
		{
			MethodName: "StartScreenShare",
			Handler:    _ChatService_StartScreenShare_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessages",
			Handler:       _ChatService_ReceiveMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchVideoStream",
			Handler:       _ChatService_WatchVideoStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchScreenShare",
			Handler:       _ChatService_WatchScreenShare_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kasugai.proto",
}

// FileTransferServiceClient is the client API for FileTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferServiceClient interface {
	// P2P file transfer
	SendFileMetadata(ctx context.Context, in *FileMetadata, opts ...grpc.CallOption) (*Ack, error)
	SendFileChunk(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (*Ack, error)
	ReceiveFileMetadata(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FileMetadata, error)
	ReceiveFileChunk(ctx context.Context, in *Id, opts ...grpc.CallOption) (FileTransferService_ReceiveFileChunkClient, error)
	// Server to user file transfer
	UploadFileToServer(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (*Ack, error)
	DownloadFileFromServer(ctx context.Context, in *Id, opts ...grpc.CallOption) (FileTransferService_DownloadFileFromServerClient, error)
}

type fileTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferServiceClient(cc grpc.ClientConnInterface) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) SendFileMetadata(ctx context.Context, in *FileMetadata, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/kasugai.FileTransferService/SendFileMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) SendFileChunk(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/kasugai.FileTransferService/SendFileChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) ReceiveFileMetadata(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FileMetadata, error) {
	out := new(FileMetadata)
	err := c.cc.Invoke(ctx, "/kasugai.FileTransferService/ReceiveFileMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) ReceiveFileChunk(ctx context.Context, in *Id, opts ...grpc.CallOption) (FileTransferService_ReceiveFileChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[0], "/kasugai.FileTransferService/ReceiveFileChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceReceiveFileChunkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransferService_ReceiveFileChunkClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type fileTransferServiceReceiveFileChunkClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceReceiveFileChunkClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferServiceClient) UploadFileToServer(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/kasugai.FileTransferService/UploadFileToServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) DownloadFileFromServer(ctx context.Context, in *Id, opts ...grpc.CallOption) (FileTransferService_DownloadFileFromServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[1], "/kasugai.FileTransferService/DownloadFileFromServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceDownloadFileFromServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransferService_DownloadFileFromServerClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type fileTransferServiceDownloadFileFromServerClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceDownloadFileFromServerClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileTransferServiceServer is the server API for FileTransferService service.
// All implementations must embed UnimplementedFileTransferServiceServer
// for forward compatibility
type FileTransferServiceServer interface {
	// P2P file transfer
	SendFileMetadata(context.Context, *FileMetadata) (*Ack, error)
	SendFileChunk(context.Context, *FileChunk) (*Ack, error)
	ReceiveFileMetadata(context.Context, *Id) (*FileMetadata, error)
	ReceiveFileChunk(*Id, FileTransferService_ReceiveFileChunkServer) error
	// Server to user file transfer
	UploadFileToServer(context.Context, *FileChunk) (*Ack, error)
	DownloadFileFromServer(*Id, FileTransferService_DownloadFileFromServerServer) error
	mustEmbedUnimplementedFileTransferServiceServer()
}

// UnimplementedFileTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileTransferServiceServer struct {
}

func (UnimplementedFileTransferServiceServer) SendFileMetadata(context.Context, *FileMetadata) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFileMetadata not implemented")
}
func (UnimplementedFileTransferServiceServer) SendFileChunk(context.Context, *FileChunk) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFileChunk not implemented")
}
func (UnimplementedFileTransferServiceServer) ReceiveFileMetadata(context.Context, *Id) (*FileMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFileMetadata not implemented")
}
func (UnimplementedFileTransferServiceServer) ReceiveFileChunk(*Id, FileTransferService_ReceiveFileChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveFileChunk not implemented")
}
func (UnimplementedFileTransferServiceServer) UploadFileToServer(context.Context, *FileChunk) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileToServer not implemented")
}
func (UnimplementedFileTransferServiceServer) DownloadFileFromServer(*Id, FileTransferService_DownloadFileFromServerServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFileFromServer not implemented")
}
func (UnimplementedFileTransferServiceServer) mustEmbedUnimplementedFileTransferServiceServer() {}

// UnsafeFileTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServiceServer will
// result in compilation errors.
type UnsafeFileTransferServiceServer interface {
	mustEmbedUnimplementedFileTransferServiceServer()
}

func RegisterFileTransferServiceServer(s grpc.ServiceRegistrar, srv FileTransferServiceServer) {
	s.RegisterService(&FileTransferService_ServiceDesc, srv)
}

func _FileTransferService_SendFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).SendFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasugai.FileTransferService/SendFileMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).SendFileMetadata(ctx, req.(*FileMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_SendFileChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileChunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).SendFileChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasugai.FileTransferService/SendFileChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).SendFileChunk(ctx, req.(*FileChunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_ReceiveFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).ReceiveFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasugai.FileTransferService/ReceiveFileMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).ReceiveFileMetadata(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_ReceiveFileChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).ReceiveFileChunk(m, &fileTransferServiceReceiveFileChunkServer{stream})
}

type FileTransferService_ReceiveFileChunkServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type fileTransferServiceReceiveFileChunkServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceReceiveFileChunkServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTransferService_UploadFileToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileChunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).UploadFileToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kasugai.FileTransferService/UploadFileToServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).UploadFileToServer(ctx, req.(*FileChunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_DownloadFileFromServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).DownloadFileFromServer(m, &fileTransferServiceDownloadFileFromServerServer{stream})
}

type FileTransferService_DownloadFileFromServerServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type fileTransferServiceDownloadFileFromServerServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceDownloadFileFromServerServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// FileTransferService_ServiceDesc is the grpc.ServiceDesc for FileTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kasugai.FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFileMetadata",
			Handler:    _FileTransferService_SendFileMetadata_Handler,
		},
		{
			MethodName: "SendFileChunk",
			Handler:    _FileTransferService_SendFileChunk_Handler,
		},
		{
			MethodName: "ReceiveFileMetadata",
			Handler:    _FileTransferService_ReceiveFileMetadata_Handler,
		},
		{
			MethodName: "UploadFileToServer",
			Handler:    _FileTransferService_UploadFileToServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveFileChunk",
			Handler:       _FileTransferService_ReceiveFileChunk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadFileFromServer",
			Handler:       _FileTransferService_DownloadFileFromServer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kasugai.proto",
}
