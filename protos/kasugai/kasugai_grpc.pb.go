// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: kasugai.proto

package kasugai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatService_RegisterClient_FullMethodName   = "/kasugai.ChatService/RegisterClient"
	ChatService_ActiveUsers_FullMethodName      = "/kasugai.ChatService/ActiveUsers"
	ChatService_SendMessage_FullMethodName      = "/kasugai.ChatService/SendMessage"
	ChatService_ReceiveMessages_FullMethodName  = "/kasugai.ChatService/ReceiveMessages"
	ChatService_StartVideoStream_FullMethodName = "/kasugai.ChatService/StartVideoStream"
	ChatService_WatchVideoStream_FullMethodName = "/kasugai.ChatService/WatchVideoStream"
	ChatService_StartScreenShare_FullMethodName = "/kasugai.ChatService/StartScreenShare"
	ChatService_WatchScreenShare_FullMethodName = "/kasugai.ChatService/WatchScreenShare"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definitions
type ChatServiceClient interface {
	RegisterClient(ctx context.Context, in *User, opts ...grpc.CallOption) (*Ack, error)
	ActiveUsers(ctx context.Context, in *ActiveUsersRequest, opts ...grpc.CallOption) (*ActiveUsersList, error)
	// Text messaging
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Ack, error)
	ReceiveMessages(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
	// Video streaming
	StartVideoStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[VideoStream, Ack], error)
	WatchVideoStream(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoStream], error)
	// Screen sharing
	StartScreenShare(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ScreenShare, Ack], error)
	WatchScreenShare(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScreenShare], error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) RegisterClient(ctx context.Context, in *User, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, ChatService_RegisterClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ActiveUsers(ctx context.Context, in *ActiveUsersRequest, opts ...grpc.CallOption) (*ActiveUsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActiveUsersList)
	err := c.cc.Invoke(ctx, ChatService_ActiveUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, ChatService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReceiveMessages(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], ChatService_ReceiveMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Id, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ReceiveMessagesClient = grpc.ServerStreamingClient[Message]

func (c *chatServiceClient) StartVideoStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[VideoStream, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], ChatService_StartVideoStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VideoStream, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_StartVideoStreamClient = grpc.ClientStreamingClient[VideoStream, Ack]

func (c *chatServiceClient) WatchVideoStream(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoStream], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[2], ChatService_WatchVideoStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Id, VideoStream]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_WatchVideoStreamClient = grpc.ServerStreamingClient[VideoStream]

func (c *chatServiceClient) StartScreenShare(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ScreenShare, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[3], ChatService_StartScreenShare_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScreenShare, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_StartScreenShareClient = grpc.ClientStreamingClient[ScreenShare, Ack]

func (c *chatServiceClient) WatchScreenShare(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScreenShare], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[4], ChatService_WatchScreenShare_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Id, ScreenShare]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_WatchScreenShareClient = grpc.ServerStreamingClient[ScreenShare]

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility.
//
// Service definitions
type ChatServiceServer interface {
	RegisterClient(context.Context, *User) (*Ack, error)
	ActiveUsers(context.Context, *ActiveUsersRequest) (*ActiveUsersList, error)
	// Text messaging
	SendMessage(context.Context, *Message) (*Ack, error)
	ReceiveMessages(*Id, grpc.ServerStreamingServer[Message]) error
	// Video streaming
	StartVideoStream(grpc.ClientStreamingServer[VideoStream, Ack]) error
	WatchVideoStream(*Id, grpc.ServerStreamingServer[VideoStream]) error
	// Screen sharing
	StartScreenShare(grpc.ClientStreamingServer[ScreenShare, Ack]) error
	WatchScreenShare(*Id, grpc.ServerStreamingServer[ScreenShare]) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServiceServer struct{}

func (UnimplementedChatServiceServer) RegisterClient(context.Context, *User) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedChatServiceServer) ActiveUsers(context.Context, *ActiveUsersRequest) (*ActiveUsersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveUsers not implemented")
}
func (UnimplementedChatServiceServer) SendMessage(context.Context, *Message) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) ReceiveMessages(*Id, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedChatServiceServer) StartVideoStream(grpc.ClientStreamingServer[VideoStream, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method StartVideoStream not implemented")
}
func (UnimplementedChatServiceServer) WatchVideoStream(*Id, grpc.ServerStreamingServer[VideoStream]) error {
	return status.Errorf(codes.Unimplemented, "method WatchVideoStream not implemented")
}
func (UnimplementedChatServiceServer) StartScreenShare(grpc.ClientStreamingServer[ScreenShare, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method StartScreenShare not implemented")
}
func (UnimplementedChatServiceServer) WatchScreenShare(*Id, grpc.ServerStreamingServer[ScreenShare]) error {
	return status.Errorf(codes.Unimplemented, "method WatchScreenShare not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}
func (UnimplementedChatServiceServer) testEmbeddedByValue()                     {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_RegisterClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RegisterClient(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ActiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ActiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ActiveUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ActiveUsers(ctx, req.(*ActiveUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ReceiveMessages(m, &grpc.GenericServerStream[Id, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ReceiveMessagesServer = grpc.ServerStreamingServer[Message]

func _ChatService_StartVideoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).StartVideoStream(&grpc.GenericServerStream[VideoStream, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_StartVideoStreamServer = grpc.ClientStreamingServer[VideoStream, Ack]

func _ChatService_WatchVideoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).WatchVideoStream(m, &grpc.GenericServerStream[Id, VideoStream]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_WatchVideoStreamServer = grpc.ServerStreamingServer[VideoStream]

func _ChatService_StartScreenShare_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).StartScreenShare(&grpc.GenericServerStream[ScreenShare, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_StartScreenShareServer = grpc.ClientStreamingServer[ScreenShare, Ack]

func _ChatService_WatchScreenShare_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).WatchScreenShare(m, &grpc.GenericServerStream[Id, ScreenShare]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_WatchScreenShareServer = grpc.ServerStreamingServer[ScreenShare]

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kasugai.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClient",
			Handler:    _ChatService_RegisterClient_Handler,
		},
		{
			MethodName: "ActiveUsers",
			Handler:    _ChatService_ActiveUsers_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessages",
			Handler:       _ChatService_ReceiveMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartVideoStream",
			Handler:       _ChatService_StartVideoStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchVideoStream",
			Handler:       _ChatService_WatchVideoStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartScreenShare",
			Handler:       _ChatService_StartScreenShare_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchScreenShare",
			Handler:       _ChatService_WatchScreenShare_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kasugai.proto",
}

const (
	FileTransferService_SendFileMetadata_FullMethodName       = "/kasugai.FileTransferService/SendFileMetadata"
	FileTransferService_SendFileChunk_FullMethodName          = "/kasugai.FileTransferService/SendFileChunk"
	FileTransferService_ReceiveFileMetadata_FullMethodName    = "/kasugai.FileTransferService/ReceiveFileMetadata"
	FileTransferService_ReceiveFileChunk_FullMethodName       = "/kasugai.FileTransferService/ReceiveFileChunk"
	FileTransferService_UploadFileToServer_FullMethodName     = "/kasugai.FileTransferService/UploadFileToServer"
	FileTransferService_DownloadFileFromServer_FullMethodName = "/kasugai.FileTransferService/DownloadFileFromServer"
)

// FileTransferServiceClient is the client API for FileTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferServiceClient interface {
	// P2P file transfer
	SendFileMetadata(ctx context.Context, in *FileMetadata, opts ...grpc.CallOption) (*Ack, error)
	SendFileChunk(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (*Ack, error)
	ReceiveFileMetadata(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FileMetadata, error)
	ReceiveFileChunk(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	// Server to user file transfer
	UploadFileToServer(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (*Ack, error)
	DownloadFileFromServer(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
}

type fileTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferServiceClient(cc grpc.ClientConnInterface) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) SendFileMetadata(ctx context.Context, in *FileMetadata, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, FileTransferService_SendFileMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) SendFileChunk(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, FileTransferService_SendFileChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) ReceiveFileMetadata(ctx context.Context, in *Id, opts ...grpc.CallOption) (*FileMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileMetadata)
	err := c.cc.Invoke(ctx, FileTransferService_ReceiveFileMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) ReceiveFileChunk(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[0], FileTransferService_ReceiveFileChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Id, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_ReceiveFileChunkClient = grpc.ServerStreamingClient[FileChunk]

func (c *fileTransferServiceClient) UploadFileToServer(ctx context.Context, in *FileChunk, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, FileTransferService_UploadFileToServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferServiceClient) DownloadFileFromServer(ctx context.Context, in *Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[1], FileTransferService_DownloadFileFromServer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Id, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_DownloadFileFromServerClient = grpc.ServerStreamingClient[FileChunk]

// FileTransferServiceServer is the server API for FileTransferService service.
// All implementations must embed UnimplementedFileTransferServiceServer
// for forward compatibility.
type FileTransferServiceServer interface {
	// P2P file transfer
	SendFileMetadata(context.Context, *FileMetadata) (*Ack, error)
	SendFileChunk(context.Context, *FileChunk) (*Ack, error)
	ReceiveFileMetadata(context.Context, *Id) (*FileMetadata, error)
	ReceiveFileChunk(*Id, grpc.ServerStreamingServer[FileChunk]) error
	// Server to user file transfer
	UploadFileToServer(context.Context, *FileChunk) (*Ack, error)
	DownloadFileFromServer(*Id, grpc.ServerStreamingServer[FileChunk]) error
	mustEmbedUnimplementedFileTransferServiceServer()
}

// UnimplementedFileTransferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileTransferServiceServer struct{}

func (UnimplementedFileTransferServiceServer) SendFileMetadata(context.Context, *FileMetadata) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFileMetadata not implemented")
}
func (UnimplementedFileTransferServiceServer) SendFileChunk(context.Context, *FileChunk) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFileChunk not implemented")
}
func (UnimplementedFileTransferServiceServer) ReceiveFileMetadata(context.Context, *Id) (*FileMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFileMetadata not implemented")
}
func (UnimplementedFileTransferServiceServer) ReceiveFileChunk(*Id, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveFileChunk not implemented")
}
func (UnimplementedFileTransferServiceServer) UploadFileToServer(context.Context, *FileChunk) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileToServer not implemented")
}
func (UnimplementedFileTransferServiceServer) DownloadFileFromServer(*Id, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFileFromServer not implemented")
}
func (UnimplementedFileTransferServiceServer) mustEmbedUnimplementedFileTransferServiceServer() {}
func (UnimplementedFileTransferServiceServer) testEmbeddedByValue()                             {}

// UnsafeFileTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServiceServer will
// result in compilation errors.
type UnsafeFileTransferServiceServer interface {
	mustEmbedUnimplementedFileTransferServiceServer()
}

func RegisterFileTransferServiceServer(s grpc.ServiceRegistrar, srv FileTransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileTransferService_ServiceDesc, srv)
}

func _FileTransferService_SendFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).SendFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_SendFileMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).SendFileMetadata(ctx, req.(*FileMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_SendFileChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileChunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).SendFileChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_SendFileChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).SendFileChunk(ctx, req.(*FileChunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_ReceiveFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).ReceiveFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_ReceiveFileMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).ReceiveFileMetadata(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_ReceiveFileChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).ReceiveFileChunk(m, &grpc.GenericServerStream[Id, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_ReceiveFileChunkServer = grpc.ServerStreamingServer[FileChunk]

func _FileTransferService_UploadFileToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileChunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServiceServer).UploadFileToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransferService_UploadFileToServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServiceServer).UploadFileToServer(ctx, req.(*FileChunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransferService_DownloadFileFromServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).DownloadFileFromServer(m, &grpc.GenericServerStream[Id, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_DownloadFileFromServerServer = grpc.ServerStreamingServer[FileChunk]

// FileTransferService_ServiceDesc is the grpc.ServiceDesc for FileTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kasugai.FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFileMetadata",
			Handler:    _FileTransferService_SendFileMetadata_Handler,
		},
		{
			MethodName: "SendFileChunk",
			Handler:    _FileTransferService_SendFileChunk_Handler,
		},
		{
			MethodName: "ReceiveFileMetadata",
			Handler:    _FileTransferService_ReceiveFileMetadata_Handler,
		},
		{
			MethodName: "UploadFileToServer",
			Handler:    _FileTransferService_UploadFileToServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveFileChunk",
			Handler:       _FileTransferService_ReceiveFileChunk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadFileFromServer",
			Handler:       _FileTransferService_DownloadFileFromServer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kasugai.proto",
}
