# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import kasugai_pb2 as kasugai__pb2


class ChatServiceStub(object):
    """Service definitions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/kasugai.ChatService/RegisterClient',
                request_serializer=kasugai__pb2.ClientInfo.SerializeToString,
                response_deserializer=kasugai__pb2.Ack.FromString,
                )
        self.SendHeartbeat = channel.unary_unary(
                '/kasugai.ChatService/SendHeartbeat',
                request_serializer=kasugai__pb2.Heartbeat.SerializeToString,
                response_deserializer=kasugai__pb2.Ack.FromString,
                )
        self.ReceiveHeartbeats = channel.stream_unary(
                '/kasugai.ChatService/ReceiveHeartbeats',
                request_serializer=kasugai__pb2.Heartbeat.SerializeToString,
                response_deserializer=kasugai__pb2.Ack.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/kasugai.ChatService/SendMessage',
                request_serializer=kasugai__pb2.Message.SerializeToString,
                response_deserializer=kasugai__pb2.Ack.FromString,
                )
        self.ReceiveMessages = channel.unary_stream(
                '/kasugai.ChatService/ReceiveMessages',
                request_serializer=kasugai__pb2.ClientInfo.SerializeToString,
                response_deserializer=kasugai__pb2.Message.FromString,
                )
        self.StartVideoStream = channel.stream_unary(
                '/kasugai.ChatService/StartVideoStream',
                request_serializer=kasugai__pb2.VideoStream.SerializeToString,
                response_deserializer=kasugai__pb2.Ack.FromString,
                )
        self.WatchVideoStream = channel.unary_stream(
                '/kasugai.ChatService/WatchVideoStream',
                request_serializer=kasugai__pb2.ClientInfo.SerializeToString,
                response_deserializer=kasugai__pb2.VideoStream.FromString,
                )
        self.StartScreenShare = channel.stream_unary(
                '/kasugai.ChatService/StartScreenShare',
                request_serializer=kasugai__pb2.ScreenShare.SerializeToString,
                response_deserializer=kasugai__pb2.Ack.FromString,
                )
        self.WatchScreenShare = channel.unary_stream(
                '/kasugai.ChatService/WatchScreenShare',
                request_serializer=kasugai__pb2.ClientInfo.SerializeToString,
                response_deserializer=kasugai__pb2.ScreenShare.FromString,
                )
        self.ListRegisteredClients = channel.unary_unary(
                '/kasugai.ChatService/ListRegisteredClients',
                request_serializer=kasugai__pb2.ListClientsRequest.SerializeToString,
                response_deserializer=kasugai__pb2.ListClientsResponse.FromString,
                )


class ChatServiceServicer(object):
    """Service definitions
    """

    def RegisterClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHeartbeat(self, request, context):
        """Heartbeat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveHeartbeats(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Text messaging
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartVideoStream(self, request_iterator, context):
        """Video streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchVideoStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartScreenShare(self, request_iterator, context):
        """Screen sharing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchScreenShare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRegisteredClients(self, request, context):
        """List clients
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=kasugai__pb2.ClientInfo.FromString,
                    response_serializer=kasugai__pb2.Ack.SerializeToString,
            ),
            'SendHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHeartbeat,
                    request_deserializer=kasugai__pb2.Heartbeat.FromString,
                    response_serializer=kasugai__pb2.Ack.SerializeToString,
            ),
            'ReceiveHeartbeats': grpc.stream_unary_rpc_method_handler(
                    servicer.ReceiveHeartbeats,
                    request_deserializer=kasugai__pb2.Heartbeat.FromString,
                    response_serializer=kasugai__pb2.Ack.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=kasugai__pb2.Message.FromString,
                    response_serializer=kasugai__pb2.Ack.SerializeToString,
            ),
            'ReceiveMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveMessages,
                    request_deserializer=kasugai__pb2.ClientInfo.FromString,
                    response_serializer=kasugai__pb2.Message.SerializeToString,
            ),
            'StartVideoStream': grpc.stream_unary_rpc_method_handler(
                    servicer.StartVideoStream,
                    request_deserializer=kasugai__pb2.VideoStream.FromString,
                    response_serializer=kasugai__pb2.Ack.SerializeToString,
            ),
            'WatchVideoStream': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchVideoStream,
                    request_deserializer=kasugai__pb2.ClientInfo.FromString,
                    response_serializer=kasugai__pb2.VideoStream.SerializeToString,
            ),
            'StartScreenShare': grpc.stream_unary_rpc_method_handler(
                    servicer.StartScreenShare,
                    request_deserializer=kasugai__pb2.ScreenShare.FromString,
                    response_serializer=kasugai__pb2.Ack.SerializeToString,
            ),
            'WatchScreenShare': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchScreenShare,
                    request_deserializer=kasugai__pb2.ClientInfo.FromString,
                    response_serializer=kasugai__pb2.ScreenShare.SerializeToString,
            ),
            'ListRegisteredClients': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRegisteredClients,
                    request_deserializer=kasugai__pb2.ListClientsRequest.FromString,
                    response_serializer=kasugai__pb2.ListClientsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kasugai.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """Service definitions
    """

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kasugai.ChatService/RegisterClient',
            kasugai__pb2.ClientInfo.SerializeToString,
            kasugai__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kasugai.ChatService/SendHeartbeat',
            kasugai__pb2.Heartbeat.SerializeToString,
            kasugai__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveHeartbeats(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/kasugai.ChatService/ReceiveHeartbeats',
            kasugai__pb2.Heartbeat.SerializeToString,
            kasugai__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kasugai.ChatService/SendMessage',
            kasugai__pb2.Message.SerializeToString,
            kasugai__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/kasugai.ChatService/ReceiveMessages',
            kasugai__pb2.ClientInfo.SerializeToString,
            kasugai__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartVideoStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/kasugai.ChatService/StartVideoStream',
            kasugai__pb2.VideoStream.SerializeToString,
            kasugai__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchVideoStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/kasugai.ChatService/WatchVideoStream',
            kasugai__pb2.ClientInfo.SerializeToString,
            kasugai__pb2.VideoStream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartScreenShare(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/kasugai.ChatService/StartScreenShare',
            kasugai__pb2.ScreenShare.SerializeToString,
            kasugai__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchScreenShare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/kasugai.ChatService/WatchScreenShare',
            kasugai__pb2.ClientInfo.SerializeToString,
            kasugai__pb2.ScreenShare.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRegisteredClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kasugai.ChatService/ListRegisteredClients',
            kasugai__pb2.ListClientsRequest.SerializeToString,
            kasugai__pb2.ListClientsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FileTransferServiceStub(object):
=======
=======
>>>>>>> Stashed changes
import client.protos.kasugai_pb2 as kasugaipy_pb2


class BroadcastStub(object):
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
<<<<<<< Updated upstream
<<<<<<< Updated upstream
        self.SendFileMetadata = channel.unary_unary(
                '/kasugai.FileTransferService/SendFileMetadata',
                request_serializer=kasugai__pb2.FileMetadata.SerializeToString,
                response_deserializer=kasugai__pb2.Ack.FromString,
                )
        self.SendFileChunk = channel.unary_unary(
                '/kasugai.FileTransferService/SendFileChunk',
                request_serializer=kasugai__pb2.FileChunk.SerializeToString,
                response_deserializer=kasugai__pb2.Ack.FromString,
                )
        self.ReceiveFileMetadata = channel.unary_unary(
                '/kasugai.FileTransferService/ReceiveFileMetadata',
                request_serializer=kasugai__pb2.ClientInfo.SerializeToString,
                response_deserializer=kasugai__pb2.FileMetadata.FromString,
                )
        self.ReceiveFileChunk = channel.unary_stream(
                '/kasugai.FileTransferService/ReceiveFileChunk',
                request_serializer=kasugai__pb2.ClientInfo.SerializeToString,
                response_deserializer=kasugai__pb2.FileChunk.FromString,
                )
        self.UploadFileToServer = channel.unary_unary(
                '/kasugai.FileTransferService/UploadFileToServer',
                request_serializer=kasugai__pb2.FileChunk.SerializeToString,
                response_deserializer=kasugai__pb2.Ack.FromString,
                )
        self.DownloadFileFromServer = channel.unary_stream(
                '/kasugai.FileTransferService/DownloadFileFromServer',
                request_serializer=kasugai__pb2.ClientInfo.SerializeToString,
                response_deserializer=kasugai__pb2.FileChunk.FromString,
                )


class FileTransferServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendFileMetadata(self, request, context):
        """P2P file transfer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFileChunk(self, request, context):
=======
=======
>>>>>>> Stashed changes
        self.ChatService = channel.stream_stream(
                '/kasugai.Broadcast/ChatService',
                request_serializer=kasugaipy_pb2.MessageResponse.SerializeToString,
                response_deserializer=kasugaipy_pb2.MessageResponse.FromString,
                )
        self.ActiveUsers = channel.unary_unary(
                '/kasugai.Broadcast/ActiveUsers',
                request_serializer=kasugaipy_pb2.ActiveUsersRequest.SerializeToString,
                response_deserializer=kasugaipy_pb2.ActiveUsersList.FromString,
                )


class BroadcastServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ChatService(self, request_iterator, context):
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

<<<<<<< Updated upstream
<<<<<<< Updated upstream
    def ReceiveFileMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveFileChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFileToServer(self, request, context):
        """Server to user file transfer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFileFromServer(self, request, context):
=======
    def ActiveUsers(self, request, context):
>>>>>>> Stashed changes
=======
    def ActiveUsers(self, request, context):
>>>>>>> Stashed changes
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


<<<<<<< Updated upstream
<<<<<<< Updated upstream
def add_FileTransferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendFileMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFileMetadata,
                    request_deserializer=kasugai__pb2.FileMetadata.FromString,
                    response_serializer=kasugai__pb2.Ack.SerializeToString,
            ),
            'SendFileChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFileChunk,
                    request_deserializer=kasugai__pb2.FileChunk.FromString,
                    response_serializer=kasugai__pb2.Ack.SerializeToString,
            ),
            'ReceiveFileMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveFileMetadata,
                    request_deserializer=kasugai__pb2.ClientInfo.FromString,
                    response_serializer=kasugai__pb2.FileMetadata.SerializeToString,
            ),
            'ReceiveFileChunk': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveFileChunk,
                    request_deserializer=kasugai__pb2.ClientInfo.FromString,
                    response_serializer=kasugai__pb2.FileChunk.SerializeToString,
            ),
            'UploadFileToServer': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadFileToServer,
                    request_deserializer=kasugai__pb2.FileChunk.FromString,
                    response_serializer=kasugai__pb2.Ack.SerializeToString,
            ),
            'DownloadFileFromServer': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadFileFromServer,
                    request_deserializer=kasugai__pb2.ClientInfo.FromString,
                    response_serializer=kasugai__pb2.FileChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kasugai.FileTransferService', rpc_method_handlers)
=======
=======
>>>>>>> Stashed changes
def add_BroadcastServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ChatService': grpc.stream_stream_rpc_method_handler(
                    servicer.ChatService,
                    request_deserializer=kasugaipy_pb2.MessageResponse.FromString,
                    response_serializer=kasugaipy_pb2.MessageResponse.SerializeToString,
            ),
            'ActiveUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ActiveUsers,
                    request_deserializer=kasugaipy_pb2.ActiveUsersRequest.FromString,
                    response_serializer=kasugaipy_pb2.ActiveUsersList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kasugai.Broadcast', rpc_method_handlers)
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
<<<<<<< Updated upstream
<<<<<<< Updated upstream
class FileTransferService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendFileMetadata(request,
=======
=======
>>>>>>> Stashed changes
class Broadcast(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ChatService(request_iterator,
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
<<<<<<< Updated upstream
<<<<<<< Updated upstream
        return grpc.experimental.unary_unary(request, target, '/kasugai.FileTransferService/SendFileMetadata',
            kasugai__pb2.FileMetadata.SerializeToString,
            kasugai__pb2.Ack.FromString,
=======
        return grpc.experimental.stream_stream(request_iterator, target, '/kasugai.Broadcast/ChatService',
            kasugaipy_pb2.MessageResponse.SerializeToString,
            kasugaipy_pb2.MessageResponse.FromString,
>>>>>>> Stashed changes
=======
        return grpc.experimental.stream_stream(request_iterator, target, '/kasugai.Broadcast/ChatService',
            kasugaipy_pb2.MessageResponse.SerializeToString,
            kasugaipy_pb2.MessageResponse.FromString,
>>>>>>> Stashed changes
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
<<<<<<< Updated upstream
<<<<<<< Updated upstream
    def SendFileChunk(request,
=======
    def ActiveUsers(request,
>>>>>>> Stashed changes
=======
    def ActiveUsers(request,
>>>>>>> Stashed changes
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
<<<<<<< Updated upstream
<<<<<<< Updated upstream
        return grpc.experimental.unary_unary(request, target, '/kasugai.FileTransferService/SendFileChunk',
            kasugai__pb2.FileChunk.SerializeToString,
            kasugai__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveFileMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kasugai.FileTransferService/ReceiveFileMetadata',
            kasugai__pb2.ClientInfo.SerializeToString,
            kasugai__pb2.FileMetadata.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveFileChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/kasugai.FileTransferService/ReceiveFileChunk',
            kasugai__pb2.ClientInfo.SerializeToString,
            kasugai__pb2.FileChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadFileToServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kasugai.FileTransferService/UploadFileToServer',
            kasugai__pb2.FileChunk.SerializeToString,
            kasugai__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadFileFromServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/kasugai.FileTransferService/DownloadFileFromServer',
            kasugai__pb2.ClientInfo.SerializeToString,
            kasugai__pb2.FileChunk.FromString,
=======
        return grpc.experimental.unary_unary(request, target, '/kasugai.Broadcast/ActiveUsers',
            kasugaipy_pb2.ActiveUsersRequest.SerializeToString,
            kasugaipy_pb2.ActiveUsersList.FromString,
>>>>>>> Stashed changes
=======
        return grpc.experimental.unary_unary(request, target, '/kasugai.Broadcast/ActiveUsers',
            kasugaipy_pb2.ActiveUsersRequest.SerializeToString,
            kasugaipy_pb2.ActiveUsersList.FromString,
>>>>>>> Stashed changes
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
