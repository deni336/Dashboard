// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.0
// source: kasugai.proto

package kasugai

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A unique ID to identify messages, streams, and files
type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kasugai_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_kasugai_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_kasugai_proto_rawDescGZIP(), []int{0}
}

func (x *Id) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Message types for text-based chat
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId   *Id    `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	SenderId    string `protobuf:"bytes,2,opt,name=senderId,proto3" json:"senderId,omitempty"`
	RecipientId string `protobuf:"bytes,3,opt,name=recipientId,proto3" json:"recipientId,omitempty"`
	Content     string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp   int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Unix timestamp
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kasugai_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_kasugai_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_kasugai_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetMessageId() *Id {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *Message) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *Message) GetRecipientId() string {
	if x != nil {
		return x.RecipientId
	}
	return ""
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message types for video streaming and screen sharing
type VideoStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId *Id    `protobuf:"bytes,1,opt,name=streamId,proto3" json:"streamId,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // Chunk of video data
}

func (x *VideoStream) Reset() {
	*x = VideoStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kasugai_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoStream) ProtoMessage() {}

func (x *VideoStream) ProtoReflect() protoreflect.Message {
	mi := &file_kasugai_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoStream.ProtoReflect.Descriptor instead.
func (*VideoStream) Descriptor() ([]byte, []int) {
	return file_kasugai_proto_rawDescGZIP(), []int{2}
}

func (x *VideoStream) GetStreamId() *Id {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *VideoStream) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScreenShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId *Id    `protobuf:"bytes,1,opt,name=streamId,proto3" json:"streamId,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // Chunk of screenshare data
}

func (x *ScreenShare) Reset() {
	*x = ScreenShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kasugai_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenShare) ProtoMessage() {}

func (x *ScreenShare) ProtoReflect() protoreflect.Message {
	mi := &file_kasugai_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenShare.ProtoReflect.Descriptor instead.
func (*ScreenShare) Descriptor() ([]byte, []int) {
	return file_kasugai_proto_rawDescGZIP(), []int{3}
}

func (x *ScreenShare) GetStreamId() *Id {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *ScreenShare) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Message types for file transfers
type FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId *Id    `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size   int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"` // File size in bytes
	Type   string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`  // MIME type or file extension
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kasugai_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kasugai_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_kasugai_proto_rawDescGZIP(), []int{4}
}

func (x *FileMetadata) GetFileId() *Id {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *FileMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileMetadata) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type FileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId *Id    `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // Chunk of file data
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kasugai_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_kasugai_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_kasugai_proto_rawDescGZIP(), []int{5}
}

func (x *FileChunk) GetFileId() *Id {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *FileChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Acknowledgement message
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Optional error or success message
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kasugai_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_kasugai_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_kasugai_proto_rawDescGZIP(), []int{6}
}

func (x *Ack) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Ack) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_kasugai_proto protoreflect.FileDescriptor

var file_kasugai_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x22, 0x18, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x4a, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x27,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x0b, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6b,
	0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61,
	0x69, 0x2e, 0x49, 0x64, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e,
	0x49, 0x64, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39,
	0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xd2, 0x02, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67,
	0x61, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0c, 0x2e, 0x6b, 0x61, 0x73,
	0x75, 0x67, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x6b, 0x61,
	0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67,
	0x61, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x14, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x0c, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69,
	0x2e, 0x41, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0b, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67,
	0x61, 0x69, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x36, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x14, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x1a, 0x0c, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61,
	0x69, 0x2e, 0x41, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x0b, 0x2e, 0x6b, 0x61, 0x73, 0x75,
	0x67, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69,
	0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x30, 0x01, 0x32, 0xe8,
	0x02, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x2e, 0x6b, 0x61, 0x73,
	0x75, 0x67, 0x61, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x0c, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x12,
	0x31, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x12, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x0c, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x41,
	0x63, 0x6b, 0x12, 0x39, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0b, 0x2e, 0x6b, 0x61, 0x73, 0x75,
	0x67, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a,
	0x10, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x0b, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x49, 0x64, 0x1a, 0x12,
	0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x6b, 0x61, 0x73,
	0x75, 0x67, 0x61, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x0c,
	0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x16,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69,
	0x2e, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x6b, 0x61, 0x73, 0x75, 0x67, 0x61, 0x69, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2f, 0x6b, 0x61,
	0x73, 0x75, 0x67, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kasugai_proto_rawDescOnce sync.Once
	file_kasugai_proto_rawDescData = file_kasugai_proto_rawDesc
)

func file_kasugai_proto_rawDescGZIP() []byte {
	file_kasugai_proto_rawDescOnce.Do(func() {
		file_kasugai_proto_rawDescData = protoimpl.X.CompressGZIP(file_kasugai_proto_rawDescData)
	})
	return file_kasugai_proto_rawDescData
}

var file_kasugai_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_kasugai_proto_goTypes = []interface{}{
	(*Id)(nil),           // 0: kasugai.Id
	(*Message)(nil),      // 1: kasugai.Message
	(*VideoStream)(nil),  // 2: kasugai.VideoStream
	(*ScreenShare)(nil),  // 3: kasugai.ScreenShare
	(*FileMetadata)(nil), // 4: kasugai.FileMetadata
	(*FileChunk)(nil),    // 5: kasugai.FileChunk
	(*Ack)(nil),          // 6: kasugai.Ack
}
var file_kasugai_proto_depIdxs = []int32{
	0,  // 0: kasugai.Message.messageId:type_name -> kasugai.Id
	0,  // 1: kasugai.VideoStream.streamId:type_name -> kasugai.Id
	0,  // 2: kasugai.ScreenShare.streamId:type_name -> kasugai.Id
	0,  // 3: kasugai.FileMetadata.fileId:type_name -> kasugai.Id
	0,  // 4: kasugai.FileChunk.fileId:type_name -> kasugai.Id
	1,  // 5: kasugai.ChatService.SendMessage:input_type -> kasugai.Message
	0,  // 6: kasugai.ChatService.ReceiveMessages:input_type -> kasugai.Id
	2,  // 7: kasugai.ChatService.StartVideoStream:input_type -> kasugai.VideoStream
	0,  // 8: kasugai.ChatService.WatchVideoStream:input_type -> kasugai.Id
	3,  // 9: kasugai.ChatService.StartScreenShare:input_type -> kasugai.ScreenShare
	0,  // 10: kasugai.ChatService.WatchScreenShare:input_type -> kasugai.Id
	4,  // 11: kasugai.FileTransferService.SendFileMetadata:input_type -> kasugai.FileMetadata
	5,  // 12: kasugai.FileTransferService.SendFileChunk:input_type -> kasugai.FileChunk
	0,  // 13: kasugai.FileTransferService.ReceiveFileMetadata:input_type -> kasugai.Id
	0,  // 14: kasugai.FileTransferService.ReceiveFileChunk:input_type -> kasugai.Id
	5,  // 15: kasugai.FileTransferService.UploadFileToServer:input_type -> kasugai.FileChunk
	0,  // 16: kasugai.FileTransferService.DownloadFileFromServer:input_type -> kasugai.Id
	6,  // 17: kasugai.ChatService.SendMessage:output_type -> kasugai.Ack
	1,  // 18: kasugai.ChatService.ReceiveMessages:output_type -> kasugai.Message
	6,  // 19: kasugai.ChatService.StartVideoStream:output_type -> kasugai.Ack
	2,  // 20: kasugai.ChatService.WatchVideoStream:output_type -> kasugai.VideoStream
	6,  // 21: kasugai.ChatService.StartScreenShare:output_type -> kasugai.Ack
	3,  // 22: kasugai.ChatService.WatchScreenShare:output_type -> kasugai.ScreenShare
	6,  // 23: kasugai.FileTransferService.SendFileMetadata:output_type -> kasugai.Ack
	6,  // 24: kasugai.FileTransferService.SendFileChunk:output_type -> kasugai.Ack
	4,  // 25: kasugai.FileTransferService.ReceiveFileMetadata:output_type -> kasugai.FileMetadata
	5,  // 26: kasugai.FileTransferService.ReceiveFileChunk:output_type -> kasugai.FileChunk
	6,  // 27: kasugai.FileTransferService.UploadFileToServer:output_type -> kasugai.Ack
	5,  // 28: kasugai.FileTransferService.DownloadFileFromServer:output_type -> kasugai.FileChunk
	17, // [17:29] is the sub-list for method output_type
	5,  // [5:17] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_kasugai_proto_init() }
func file_kasugai_proto_init() {
	if File_kasugai_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kasugai_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kasugai_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kasugai_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kasugai_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kasugai_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kasugai_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kasugai_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kasugai_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_kasugai_proto_goTypes,
		DependencyIndexes: file_kasugai_proto_depIdxs,
		MessageInfos:      file_kasugai_proto_msgTypes,
	}.Build()
	File_kasugai_proto = out.File
	file_kasugai_proto_rawDesc = nil
	file_kasugai_proto_goTypes = nil
	file_kasugai_proto_depIdxs = nil
}
